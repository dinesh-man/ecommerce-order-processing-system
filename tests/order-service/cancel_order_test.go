package order_serviceimport (	"testing"	"github.com/alicebob/miniredis/v2"	"github.com/dinesh-man/ecommerce-order-processing-system/order-service/service"	"github.com/redis/go-redis/v9"	"github.com/stretchr/testify/assert"	"go.mongodb.org/mongo-driver/bson"	"go.mongodb.org/mongo-driver/bson/primitive"	"go.mongodb.org/mongo-driver/mongo"	"go.mongodb.org/mongo-driver/mongo/integration/mtest")func TestCancelOrder(t *testing.T) {	mt := mtest.New(t, mtest.NewOptions().ClientType(mtest.Mock))	//launch miniredis for testing purposes	mr, err := miniredis.Run()	if err != nil {		t.Fatalf("could not start miniredis: %v", err)	}	defer mr.Close()	// Connect go-redis client to miniredis	rc := redis.NewClient(&redis.Options{		Addr: mr.Addr(),	})	mt.Run("cancel pending order", func(mt *mtest.T) {		service.GetCollection = func(name string) *mongo.Collection {			return mt.Coll		}		orderService := service.NewOrderService("orders", "", rc, "orders")		id := primitive.NewObjectID().Hex()		mt.AddMockResponses(bson.D{			{"ok", 1},			{"n", 1},			{"nModified", 1},			{"matchedCount", 1},		})		err := orderService.CancelOrder(id)		assert.NoError(t, err)	})	mt.Run("fail to cancel non-pending order", func(mt *mtest.T) {		service.GetCollection = func(name string) *mongo.Collection {			return mt.Coll		}		orderService := service.NewOrderService("orders", "", rc, "orders")		id := primitive.NewObjectID().Hex()		mt.AddMockResponses(bson.D{			{"ok", 1},			{"n", 0},			{"nModified", 0},			{"matchedCount", 0},		})		err := orderService.CancelOrder(id)		assert.Error(t, err)		assert.Contains(t, err.Error(), "order cannot be cancelled")	})}